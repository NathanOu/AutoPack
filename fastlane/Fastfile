# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Description of what the lane does"

  time = Time.now.strftime("%Y-%m-%d %H:%M:%S")
  project_name = "{project_name}"
  bundle_id = "{bundle_id}" # test.ios
  provision_name = "{provision_name}" # XC Wildcard Dev
  pack_description = "{pack_description}" # 打包更新说明 蒲公英

  provision_path = "{provision_path}" # 需要替换的provision 文件目录路径
  project_team_id = "{project_team_id}" # 需要替换的provision 文件目录路径
  app_branch_name = "{app_branch_name}" # 需要替换的provision 文件目录路径

  pgy_app_url = "{pgy_app_url}" # 蒲公英的下载地址
  pgy_qrcode = "{pgy_qrcode}" # 蒲公英的二维码地址

  pgy_api_key = "" 
  pgy_user_key = "" 

  # 群1 
  ding_talk_config1 = {
    "ding_talk_url" => "https://oapi.dingtalk.com/robot/send?access_token=xxx",
    "contacts" => ["xxx"],
    "ding_talk_secret" => 'xxx'
  }

  # 指定钉钉群, 可指定多个
  ding_talk_robots = [ding_talk_config1]

  lane :distribution_lane do
    gym(
      clean:true, # 是否清空以前的编译信息 true：是
      scheme: project_name, # 自己项目名称
      workspace: "#{project_name}.xcworkspace", # 自己项目名称xcworkspace（使用cocoapods才会生成）
      export_method:"app-store", #app-store,ad-hoc,enterprise,development
      configuration:"Release",
      output_directory:"./fastlane/build/Release", # 打包后的 ipa 文件存放的目录
      export_xcargs: "-allowProvisioningUpdates", #访问钥匙串
      output_name: "#{project_name}_#{time}.ipa",# ipa 文件名
      silent:true,#隐藏没有必要的信息
      export_options: {
        export_method:"app-store",
        provisioningProfiles: {
        "#{bundle_id}" => "#{provision_name}",# bundleid，打包用的证书名字
        }
      }
    )
  end


  time_now = Time.now.strftime(“%Y-%m-%d %H:%M:%S”)

  lane :develop_lane do
    # add actions here: https://docs.fastlane.tools/actions
    #自增build号
    #increment_build_number_in_plist(target: SCHEME)

    # 打包之前跟新指定配置的描述文件
    update_project_provisioning(
        # 之前有sigh下载的描述文件存储路径
        profile:"#{provision_path}",

        # 打包配置，Debug，Release
        build_configuration:"Debug"
    )

    # 更新项目团队
    update_project_team(
      teamid: "#{project_team_id}"
      )
    
    gym(
      clean:true, # 是否清空以前的编译信息 true：是
      scheme: project_name, # 自己项目名称
      workspace: "#{project_name}.xcworkspace", # 自己项目名称xcworkspace（使用cocoapods才会生成）
      export_method:"development", #app-store,ad-hoc,enterprise,development
      configuration:"Debug",
      output_directory:"./fastlane/build/develop", # 打包后的 ipa 文件存放的目录
      export_xcargs: "-allowProvisioningUpdates", #访问钥匙串
      output_name: "#{project_name}_#{time}.ipa",# ipa 文件名
      silent:true,#隐藏没有必要的信息
      export_options: {
        export_method:"development",
        provisioningProfiles: {
        "#{bundle_id}" => "#{provision_name}",# bundleid，打包用的证书名字
        }
      }
    )
    
    pgyer(
      api_key: "#{pgy_api_key}", # 从蒲公英项目详情中获取的 apikey
      user_key: "#{pgy_user_key}", # 从蒲公英项目详情中获取的 userkey
      update_description: "测试自动打包上传" # 本次测试更新的文字说明（参数设置）
    )

    # ipa路径
    app_patch = lane_context[SharedValues::IPA_OUTPUT_PATH]
    # app版本号
    app_version = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleShortVersionString")
    # appbuild号
    app_build_version = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleVersion")
    # app名字
    app_name    = get_ipa_info_plist_value(ipa: app_patch, key: "CFBundleDisplayName")
    # 包大小
    compressed_file_size = File.size(File.absolute_path(app_patch)).to_f / 2**20
    formatted_file_size = '%.2f' % compressed_file_size
    # 配置钉钉机器人消息内容
    ding_talk_robots.each{|item|

      # contacts_format = ""
      # item["contacts"].each{|contact|
      #   phone = ' @' + contact
      #   contacts_format =  contacts_format + phone
      # }

      ding_talk_update_text = <<-EOF
#### #{app_name}iOS-内测版应用更新
> 版本信息：#{app_version}(Build #{app_build_version})\n
> 应用大小：#{formatted_file_size} MB\n
> 打包分支：#{app_branch_name}\n
> 更新内容：#{pack_description}\n

iPhone相机扫描二维码下载：
![二维码](#{pgy_qrcode})\n
[点我进入主页下载](#{pgy_app_url})
EOF
  
      markdown = {
        msgtype: "markdown", 
        markdown: {
          title: "#{app_name} iOS内测更新", 
          text: ding_talk_update_text
        }
      }

      ding_talk_url = item["ding_talk_url"]
      ding_talk_secret = item["ding_talk_secret"]

      #   计算签名
      timestamp = DateTime.now.strftime('%Q') 
      finaly_sign = ''
      if ding_talk_secret
        data = timestamp + "\n" + ding_talk_secret
        digest = OpenSSL::Digest.new('SHA256')
        sign_data = OpenSSL::HMAC.digest(digest, ding_talk_secret.force_encoding("UTF-8"), data.force_encoding("UTF-8"))
        finaly_sign = Base64.encode64(sign_data).gsub("\n",'')
        finaly_sign = CGI::escape(finaly_sign)
      end

      ding_talk_url = ding_talk_url + "&timestamp=#{timestamp}&sign=#{finaly_sign}"
      puts ding_talk_url
      uri = URI.parse(ding_talk_url)
      https = Net::HTTP.new(uri.host, uri.port)
      https.use_ssl = true

      request = Net::HTTP::Post.new(uri.request_uri)
      request.add_field('Content-Type', 'application/json')
      request.body = markdown.to_json
      puts request
      response = https.request(request)
      puts "------------------------------"
      puts "Response #{response.code} #{response.message}: #{response.body}"
    }

  end

end
